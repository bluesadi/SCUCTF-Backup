import angr
import claripy
from hashlib import md5
from binascii import b2a_hex

proj = angr.Project('./baby_maze', load_options={'auto_load_libs': False}) #加载二进制文件，auto_load_libs一定设置为False

all_route = b'' #记录所有的输入，最终为15 * 1000=1500个字节

maze_list=[4196234, 4203087, 4209886, 4216655, 4223358, 4230097, 4236842, 4243545, 4250494, 4257185, 4263972, 4270549, 4277276, 4284063, 4290826, 4297607, 4304478, 4311289, 4318124, 4324953, 4331908, 4338719, 4345530, 4352407, 4359152, 4365861, 4372648, 4379375, 4386216, 4393051, 4399868, 4406661, 4413466, 4420247, 4427052, 4433821, 4440626, 4447407, 4454206, 4460981, 4467786, 4474603, 4481342, 4488147, 4494910, 4501901, 4508640, 4515397, 4522184, 4528989, 4535914, 4542677, 4549524, 4556413, 4563128, 4569933, 4576678, 4583543, 4590312, 4597021, 4603766, 4610499, 4617370, 4624241, 4631058, 4637923, 4644872, 4651677, 4658446, 4665317, 4672086, 4678957, 4685858, 4692765, 4699606, 4706447, 4713348, 4720075, 4726730, 4733631, 4740490, 4747289, 4754118, 4760965, 4767680, 4774455, 4781320, 4788179, 4794984, 4801909, 4808756, 4815525, 4822384, 4829057, 4835868, 4842787, 4849592, 4856421, 4863322, 4870265]
avoid_list=[[4202842, 4203023], [4209641, 4209822], [4216410, 4216591], [4223113, 4223294], [4229852, 4230033], [4236597, 4236778], [4243300, 4243481], [4250249, 4250430], [4256940, 4257121], [4263727, 4263908], [4270304, 4270485], [4277031, 4277212], [4283818, 4283999], [4290581, 4290762], [4297362, 4297543], [4304233, 4304414], [4311044, 4311225], [4317879, 4318060], [4324708, 4324889], [4331663, 4331844], [4338474, 4338655], [4345285, 4345466], [4352162, 4352343], [4358907, 4359088], [4365616, 4365797], [4372403, 4372584], [4379130, 4379311], [4385971, 4386152], [4392806, 4392987], [4399623, 4399804], [4406416, 4406597], [4413221, 4413402], [4420002, 4420183], [4426807, 4426988], [4433576, 4433757], [4440381, 4440562], [4447162, 4447343], [4453961, 4454142], [4460736, 4460917], [4467541, 4467722], [4474358, 4474539], [4481097, 4481278], [4487902, 4488083], [4494665, 4494846], [4501656, 4501837], [4508395, 4508576], [4515152, 4515333], [4521939, 4522120], [4528744, 4528925], [4535669, 4535850], [4542432, 4542613], [4549279, 4549460], [4556168, 4556349], [4562883, 4563064], [4569688, 4569869], [4576433, 4576614], [4583298, 4583479], [4590067, 4590248], [4596776, 4596957], [4603521, 4603702], [4610254, 4610435], [4617125, 4617306], [4623996, 4624177], [4630813, 4630994], [4637678, 4637859], [4644627, 4644808], [4651432, 4651613], [4658201, 4658382], [4665072, 4665253], [4671841, 4672022], [4678712, 4678893], [4685613, 4685794], [4692520, 4692701], [4699361, 4699542], [4706202, 4706383], [4713103, 4713284], [4719830, 4720011], [4726485, 4726666], [4733386, 4733567], [4740245, 4740426], [4747044, 4747225], [4753873, 4754054], [4760720, 4760901], [4767435, 4767616], [4774210, 4774391], [4781075, 4781256], [4787934, 4788115], [4794739, 4794920], [4801664, 4801845], [4808511, 4808692], [4815280, 4815461], [4822139, 4822320], [4828812, 4828993], [4835623, 4835804], [4842542, 4842723], [4849347, 4849528], [4856176, 4856357], [4863077, 4863258], [4870020, 4870201], [4876723, 4876904]]
retn_list=[4203086, 4209885, 4216654, 4223357, 4230096, 4236841, 4243544, 4250493, 4257184, 4263971, 4270548, 4277275, 4284062, 4290825, 4297606, 4304477, 4311288, 4318123, 4324952, 4331907, 4338718, 4345529, 4352406, 4359151, 4365860, 4372647, 4379374, 4386215, 4393050, 4399867, 4406660, 4413465, 4420246, 4427051, 4433820, 4440625, 4447406, 4454205, 4460980, 4467785, 4474602, 4481341, 4488146, 4494909, 4501900, 4508639, 4515396, 4522183, 4528988, 4535913, 4542676, 4549523, 4556412, 4563127, 4569932, 4576677, 4583542, 4590311, 4597020, 4603765, 4610498, 4617369, 4624240, 4631057, 4637922, 4644871, 4651676, 4658445, 4665316, 4672085, 4678956, 4685857, 4692764, 4699605, 4706446, 4713347, 4720074, 4726729, 4733630, 4740489, 4747288, 4754117, 4760964, 4767679, 4774454, 4781319, 4788178, 4794983, 4801908, 4808755, 4815524, 4822383, 4829056, 4835867, 4842786, 4849591, 4856420, 4863321, 4870264, 4876967]
for i in range(100):
    addr = maze_list[i]
    print(i + 1)
    route = claripy.BVS('route', 15 * 8) #将输入长度约束为15字节
    state = proj.factory.blank_state(addr=addr, stdin=route)
    for j in range(15):
        b = route.get_byte(j)
        state.solver.add(b >= 33) #将输入约束为可见的ascii字符
        state.solver.add(b <= 126)
    simgr = proj.factory.simgr(state)
    simgr.explore(find=retn_list[i], avoid = avoid_list[i]) #开始符号执行
    single_route = simgr.found[0].posix.dumps(0)
    all_route += single_route
    print(f'Found route: {single_route.decode()}')

print(all_route)
digest = b2a_hex(md5(all_route).digest()).decode()
print(f'scuctf{{{digest}}}')