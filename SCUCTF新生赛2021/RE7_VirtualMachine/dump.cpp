#include <cstdio>
#include <cstdint>
#include <stdlib.h>
#define READ_WORD(PC) ((code[PC] << 8) | code[PC + 1])
#define READ_DWORD(PC) __builtin_bswap32(*(uint32_t*)&code[PC])

uint8_t code[1176] = {
    0x23, 0x00, 0x65, 0x1B, 0x1E, 0x00, 0x13, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x1A, 0x00, 0x1C, 0x01, 
    0x13, 0x00, 0x00, 0x00, 0x00, 0x57, 0x1A, 0x00, 0x1C, 0x01, 0x13, 0x00, 0x00, 0x00, 0x00, 0x72, 
    0x1A, 0x00, 0x1C, 0x01, 0x13, 0x00, 0x00, 0x00, 0x00, 0x6F, 0x1A, 0x00, 0x1C, 0x01, 0x13, 0x00, 
    0x00, 0x00, 0x00, 0x6E, 0x1A, 0x00, 0x1C, 0x01, 0x13, 0x00, 0x00, 0x00, 0x00, 0x67, 0x1A, 0x00, 
    0x1C, 0x01, 0x13, 0x00, 0x00, 0x00, 0x00, 0x21, 0x1A, 0x00, 0x1C, 0x01, 0x13, 0x00, 0x00, 0x00, 
    0x00, 0x20, 0x1A, 0x00, 0x1C, 0x01, 0x13, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x1A, 0x00, 0x1C, 0x01, 
    0x1E, 0x00, 0x18, 0x08, 0xFF, 0x13, 0x00, 0x00, 0x00, 0x00, 0x48, 0x1A, 0x00, 0x1C, 0x01, 0x13, 
    0x00, 0x00, 0x00, 0x00, 0x65, 0x1A, 0x00, 0x1C, 0x01, 0x13, 0x00, 0x00, 0x00, 0x00, 0x6C, 0x1A, 
    0x00, 0x1C, 0x01, 0x13, 0x00, 0x00, 0x00, 0x00, 0x6C, 0x1A, 0x00, 0x1C, 0x01, 0x13, 0x00, 0x00, 
    0x00, 0x00, 0x6F, 0x1A, 0x00, 0x1C, 0x01, 0x13, 0x00, 0x00, 0x00, 0x00, 0x21, 0x1A, 0x00, 0x1C, 
    0x01, 0x13, 0x00, 0x00, 0x00, 0x00, 0x20, 0x1A, 0x00, 0x1C, 0x01, 0x13, 0x00, 0x00, 0x00, 0x00, 
    0x57, 0x1A, 0x00, 0x1C, 0x01, 0x13, 0x00, 0x00, 0x00, 0x00, 0x65, 0x1A, 0x00, 0x1C, 0x01, 0x13, 
    0x00, 0x00, 0x00, 0x00, 0x6C, 0x1A, 0x00, 0x1C, 0x01, 0x13, 0x00, 0x00, 0x00, 0x00, 0x63, 0x1A, 
    0x00, 0x1C, 0x01, 0x13, 0x00, 0x00, 0x00, 0x00, 0x6F, 0x1A, 0x00, 0x1C, 0x01, 0x13, 0x00, 0x00, 
    0x00, 0x00, 0x6D, 0x1A, 0x00, 0x1C, 0x01, 0x13, 0x00, 0x00, 0x00, 0x00, 0x65, 0x1A, 0x00, 0x1C, 
    0x01, 0x13, 0x00, 0x00, 0x00, 0x00, 0x20, 0x1A, 0x00, 0x1C, 0x01, 0x13, 0x00, 0x00, 0x00, 0x00, 
    0x74, 0x1A, 0x00, 0x1C, 0x01, 0x13, 0x00, 0x00, 0x00, 0x00, 0x6F, 0x1A, 0x00, 0x1C, 0x01, 0x13, 
    0x00, 0x00, 0x00, 0x00, 0x20, 0x1A, 0x00, 0x1C, 0x01, 0x13, 0x00, 0x00, 0x00, 0x00, 0x73, 0x1A, 
    0x00, 0x1C, 0x01, 0x13, 0x00, 0x00, 0x00, 0x00, 0x63, 0x1A, 0x00, 0x1C, 0x01, 0x13, 0x00, 0x00, 
    0x00, 0x00, 0x75, 0x1A, 0x00, 0x1C, 0x01, 0x13, 0x00, 0x00, 0x00, 0x00, 0x63, 0x1A, 0x00, 0x1C, 
    0x01, 0x13, 0x00, 0x00, 0x00, 0x00, 0x74, 0x1A, 0x00, 0x1C, 0x01, 0x13, 0x00, 0x00, 0x00, 0x00, 
    0x66, 0x1A, 0x00, 0x1C, 0x01, 0x13, 0x00, 0x00, 0x00, 0x00, 0x20, 0x1A, 0x00, 0x1C, 0x01, 0x13, 
    0x00, 0x00, 0x00, 0x00, 0x63, 0x1A, 0x00, 0x1C, 0x01, 0x13, 0x00, 0x00, 0x00, 0x00, 0x68, 0x1A, 
    0x00, 0x1C, 0x01, 0x13, 0x00, 0x00, 0x00, 0x00, 0x61, 0x1A, 0x00, 0x1C, 0x01, 0x13, 0x00, 0x00, 
    0x00, 0x00, 0x6C, 0x1A, 0x00, 0x1C, 0x01, 0x13, 0x00, 0x00, 0x00, 0x00, 0x6C, 0x1A, 0x00, 0x1C, 
    0x01, 0x13, 0x00, 0x00, 0x00, 0x00, 0x65, 0x1A, 0x00, 0x1C, 0x01, 0x13, 0x00, 0x00, 0x00, 0x00, 
    0x6E, 0x1A, 0x00, 0x1C, 0x01, 0x13, 0x00, 0x00, 0x00, 0x00, 0x67, 0x1A, 0x00, 0x1C, 0x01, 0x13, 
    0x00, 0x00, 0x00, 0x00, 0x65, 0x1A, 0x00, 0x1C, 0x01, 0x13, 0x00, 0x00, 0x00, 0x00, 0x21, 0x1A, 
    0x00, 0x1C, 0x01, 0x1D, 0x23, 0x18, 0x23, 0x13, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x1A, 0x00, 0x1C, 
    0x01, 0x13, 0x00, 0x00, 0x00, 0x00, 0x49, 0x1A, 0x00, 0x1C, 0x01, 0x13, 0x00, 0x00, 0x00, 0x00, 
    0x6E, 0x1A, 0x00, 0x1C, 0x01, 0x13, 0x00, 0x00, 0x00, 0x00, 0x70, 0x1A, 0x00, 0x1C, 0x01, 0x13, 
    0x00, 0x00, 0x00, 0x00, 0x75, 0x1A, 0x00, 0x1C, 0x01, 0x13, 0x00, 0x00, 0x00, 0x00, 0x74, 0x1A, 
    0x00, 0x1C, 0x01, 0x13, 0x00, 0x00, 0x00, 0x00, 0x3A, 0x1A, 0x00, 0x1C, 0x01, 0x1D, 0x07, 0x18, 
    0x07, 0x1B, 0x17, 0x1E, 0x00, 0x1F, 0x13, 0x01, 0x00, 0x00, 0x00, 0x1A, 0x20, 0x00, 0x01, 0x22, 
    0x00, 0x03, 0x19, 0x00, 0x1C, 0x01, 0x19, 0x01, 0x1C, 0x01, 0x13, 0x02, 0x00, 0x00, 0x00, 0x73, 
    0x20, 0x00, 0x02, 0x22, 0x00, 0x03, 0x13, 0x03, 0x00, 0x00, 0x00, 0x63, 0x20, 0x01, 0x03, 0x22, 
    0x00, 0x03, 0x19, 0x00, 0x1C, 0x01, 0x19, 0x01, 0x1C, 0x01, 0x13, 0x02, 0x00, 0x00, 0x00, 0x75, 
    0x20, 0x00, 0x02, 0x22, 0x00, 0x03, 0x13, 0x03, 0x00, 0x00, 0x00, 0x63, 0x20, 0x01, 0x03, 0x22, 
    0x00, 0x03, 0x19, 0x00, 0x1C, 0x01, 0x19, 0x01, 0x1C, 0x01, 0x13, 0x02, 0x00, 0x00, 0x00, 0x74, 
    0x20, 0x00, 0x02, 0x22, 0x00, 0x03, 0x13, 0x03, 0x00, 0x00, 0x00, 0x66, 0x20, 0x01, 0x03, 0x22, 
    0x00, 0x03, 0x19, 0x00, 0x1C, 0x01, 0x13, 0x02, 0x00, 0x00, 0x00, 0x7B, 0x20, 0x00, 0x02, 0x22, 
    0x00, 0x03, 0x1E, 0x00, 0x1C, 0x19, 0x19, 0x00, 0x13, 0x02, 0x00, 0x00, 0x00, 0x7D, 0x20, 0x00, 
    0x02, 0x22, 0x00, 0x03, 0x1E, 0x00, 0x1C, 0x07, 0x15, 0x00, 0x00, 0x00, 0x12, 0x15, 0x00, 0x00, 
    0x00, 0x01, 0x19, 0x00, 0x16, 0x01, 0x0D, 0x00, 0x01, 0x0A, 0x00, 0x01, 0x1A, 0x00, 0x14, 0x01, 
    0x1C, 0x01, 0x16, 0x02, 0x16, 0x03, 0x20, 0x02, 0x03, 0x24, 0x16, 0x14, 0x00, 0x13, 0x00, 0x00, 
    0x00, 0x00, 0x01, 0x0A, 0x02, 0x00, 0x16, 0x00, 0x14, 0x03, 0x14, 0x02, 0x23, 0x02, 0xB2, 0x1E, 
    0x07, 0x19, 0x02, 0x13, 0x03, 0x00, 0x00, 0x00, 0x45, 0x20, 0x02, 0x03, 0x22, 0x00, 0x03, 0x1C, 
    0x01, 0x19, 0x02, 0x13, 0x03, 0x00, 0x00, 0x00, 0x7A, 0x20, 0x02, 0x03, 0x22, 0x00, 0x03, 0x1C, 
    0x01, 0x19, 0x02, 0x13, 0x03, 0x00, 0x00, 0x00, 0x5F, 0x20, 0x02, 0x03, 0x22, 0x00, 0x03, 0x1C, 
    0x01, 0x19, 0x02, 0x13, 0x03, 0x00, 0x00, 0x00, 0x56, 0x20, 0x02, 0x03, 0x22, 0x00, 0x03, 0x1C, 
    0x01, 0x19, 0x02, 0x13, 0x03, 0x00, 0x00, 0x00, 0x71, 0x20, 0x02, 0x03, 0x22, 0x00, 0x03, 0x1C, 
    0x01, 0x19, 0x02, 0x13, 0x03, 0x00, 0x00, 0x00, 0x7A, 0x20, 0x02, 0x03, 0x22, 0x00, 0x03, 0x1C, 
    0x01, 0x19, 0x02, 0x13, 0x03, 0x00, 0x00, 0x00, 0x7A, 0x20, 0x02, 0x03, 0x22, 0x00, 0x03, 0x1C, 
    0x01, 0x19, 0x02, 0x13, 0x03, 0x00, 0x00, 0x00, 0x85, 0x20, 0x02, 0x03, 0x22, 0x00, 0x03, 0x1C, 
    0x01, 0x19, 0x02, 0x13, 0x03, 0x00, 0x00, 0x00, 0x71, 0x20, 0x02, 0x03, 0x22, 0x00, 0x03, 0x1C, 
    0x01, 0x19, 0x02, 0x13, 0x03, 0x00, 0x00, 0x00, 0x70, 0x20, 0x02, 0x03, 0x22, 0x00, 0x03, 0x1C, 
    0x01, 0x19, 0x02, 0x13, 0x03, 0x00, 0x00, 0x00, 0x5F, 0x20, 0x02, 0x03, 0x22, 0x00, 0x03, 0x1C, 
    0x01, 0x19, 0x02, 0x13, 0x03, 0x00, 0x00, 0x00, 0x4D, 0x20, 0x02, 0x03, 0x22, 0x00, 0x03, 0x1C, 
    0x01, 0x19, 0x02, 0x13, 0x03, 0x00, 0x00, 0x00, 0x79, 0x20, 0x02, 0x03, 0x22, 0x00, 0x03, 0x1C, 
    0x01, 0x19, 0x02, 0x13, 0x03, 0x00, 0x00, 0x00, 0x7B, 0x20, 0x02, 0x03, 0x22, 0x00, 0x03, 0x1C, 
    0x01, 0x19, 0x02, 0x13, 0x03, 0x00, 0x00, 0x00, 0x76, 0x20, 0x02, 0x03, 0x22, 0x00, 0x03, 0x1C, 
    0x01, 0x19, 0x02, 0x13, 0x03, 0x00, 0x00, 0x00, 0x89, 0x20, 0x02, 0x03, 0x22, 0x00, 0x03, 0x1C, 
    0x01, 0x19, 0x02, 0x13, 0x03, 0x00, 0x00, 0x00, 0x90, 0x20, 0x02, 0x03, 0x22, 0x00, 0x03, 0x1C, 
    0x01, 0x19, 0x02, 0x13, 0x03, 0x00, 0x00, 0x00, 0x89, 0x20, 0x02, 0x03, 0x22, 0x00, 0x03, 0x1C, 
    0x01, 0x1B, 0x1E, 0x00, 0x13, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x1A, 0x00, 0x1C, 0x01, 0x13, 0x00, 
    0x00, 0x00, 0x00, 0x43, 0x1A, 0x00, 0x1C, 0x01, 0x13, 0x00, 0x00, 0x00, 0x00, 0x6F, 0x1A, 0x00, 
    0x1C, 0x01, 0x13, 0x00, 0x00, 0x00, 0x00, 0x72, 0x1A, 0x00, 0x1C, 0x01, 0x13, 0x00, 0x00, 0x00, 
    0x00, 0x72, 0x1A, 0x00, 0x1C, 0x01, 0x13, 0x00, 0x00, 0x00, 0x00, 0x63, 0x1A, 0x00, 0x1C, 0x01, 
    0x13, 0x00, 0x00, 0x00, 0x00, 0x74, 0x1A, 0x00, 0x1C, 0x01, 0x13, 0x00, 0x00, 0x00, 0x00, 0x21, 
    0x1A, 0x00, 0x1C, 0x01, 0x13, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x1A, 0x00, 0x1C, 0x01, 0x1E, 0x00, 
    0x18, 0x08, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

uint32_t PC = 0;
uint32_t mem_ptr = 0;
uint32_t imm;

int main(){
    freopen("dump.txt", "w", stdout);
    while(code[PC]){
        printf("%d: ", PC);
        switch (code[PC]){
            case 0xA:
                printf("add r%d, r%d\n", code[PC + 1], code[PC + 2]);
                PC += 3;
                break;
            case 0xB:
                printf("sub r%d, r%d\n", code[PC + 1], code[PC + 2]);
                PC += 3;
                break;
            case 0xC:
                printf("mul r%d, r%d\n", code[PC + 1], code[PC + 2]);
                PC += 3;
                break;
            case 0xD:
                printf("xor r%d, r%d\n", code[PC + 1], code[PC + 2]);
                PC += 3;
                break;
            case 0xE:
                printf("lsh r%d, r%d\n", code[PC + 1], code[PC + 2]);
                PC += 3;
                break;
            case 0xF:
                printf("rsh r%d, r%d\n", code[PC + 1], code[PC + 2]);
                PC += 3;
                break;
            case 0x10:
                printf("rol r%d, r%d\n", code[PC + 1], code[PC + 2]);
                PC += 3;
                break;
            case 0x11:
                printf("ror r%d, r%d\n", code[PC + 1], code[PC + 2]);
                PC += 3;
                break;
            case 0x12:
                printf("mov r%d, r%d\n", code[PC + 1], code[PC + 2]);
                PC += 3;
                break;
            case 0x13:
                imm = READ_DWORD(PC + 2);
                if(imm >= 32 && imm <= 126){
                    printf("mov r%d, %d(\'%c\')\n", code[PC + 1], imm, imm);
                }else{
                    printf("mov r%d, %d\n", code[PC + 1], imm);
                }
                PC += 6;
                break;
            case 0x14:
                printf("push r%d\n", code[PC + 1]);
                PC += 2;
                break;
            case 0x15:
                printf("push %x\n", READ_DWORD(PC + 1));
                PC += 5;
                break;
            case 0x16:
                printf("pop r%d\n", code[PC + 1]);
                PC += 2;
                break;
            case 0x17:
                printf("read\n");
                PC ++;
                break;
            case 0x18:
                printf("write %d\n", code[PC + 1]);
                PC += 2;
                break;
            case 0x19:
                printf("mov r%d, mem[%d]\n", code[PC + 1], mem_ptr);
                PC += 2;
                break;
            case 0x1A:
                printf("mov mem[%d], r%d\n", mem_ptr, code[PC + 1]);
                PC += 2;
                break;
            case 0x1B:
                printf("clear_mem\n");
                PC ++;
                break;
            case 0x1C:
                printf("add_mem_ptr %d\n", code[PC + 1]);
                mem_ptr += code[PC + 1];
                PC += 2;
                break;
            case 0x1D:
                printf("sub_mem_ptr %d\n", code[PC + 1]);
                mem_ptr -= code[PC + 1];
                PC += 2;
                break;
            case 0x1E:
                printf("set_mem_ptr %d\n", code[PC + 1]);
                mem_ptr = code[PC + 1];
                PC += 2;
                break;
            case 0x1F:
                printf("mov r0, len\n");
                PC ++;
                break;
            case 0x20:
                printf("cmp r%d, r%d\n", code[PC + 1], code[PC + 2]);
                PC += 3;
                break;
            case 0x21:
                printf("je %d\n", READ_WORD(PC + 1));
                PC += 3;
                break;
            case 0x22:
                printf("jne %d\n", READ_WORD(PC + 1));
                PC += 3;
                break;
            case 0x23:
                printf("jmp %d\n", READ_WORD(PC + 1));
                PC += 3;
                break;
            case 0x24:
                printf("je_rel %d\n", PC + code[PC + 1]);
                PC += 2;
                break;
            case 0x25:
                printf("jne_rel %d\n", PC + code[PC + 1]);
                PC += 2;
                break;
            case 0x26:
                printf("jmp_rel %d\n", PC + code[PC + 1]);
                PC += 2;
                break;
            case 0x27:
                printf("debug\n");
                PC ++;
                break;
            case 0x28:
                printf("nop\n");
                PC ++;
                break;
            case 0xFF:
                printf("end\n");
                PC ++;
                break;
            default:
                printf("unknown code %d\n", code[PC]);
                PC ++;
                break;
        }    
    }
}